using System.Globalization;
using System.Text.RegularExpressions;

namespace TcBlackCore
{
    static class Keywords
    {
        static MatchEvaluator KeywordsEval = new MatchEvaluator(UpText);
        static string[] KeywordList =
        {
            "abs",
            "acos",
            "add",
            "adr",
            "and",
            "andn",
            "any_date",
            "any_int",
            "any_num",
            "any_real",
            "any_sintrg",
            "any",
            "array",
            "asin",
            "at",
            "atan",
            "bitadr",
            "bool",
            "by",
            "byte",
            "cal",
            "calc",
            "calcn",
            "case",
            "constant",
            "cos",
            "date_and_time",
            "date",
            "dint",
            "div",
            "do",
            "dt",
            "dword",
            "else",
            "elsif",
            "end_case",
            "end_for",
            "end_if",
            "end_repeat",
            "end_struct",
            "end_type",
            "end_var",
            "end_while",
            "eq",
            "exit",
            "exp",
            "expt",
            "false",
            "for",
            "function_block",
            "function",
            "ge",
            "gt",
            "if",
            "indexof",
            "int",
            "jmp",
            "jmpc",
            "jmpcn",
            "ld",
            "ldn",
            "le",
            "lint",
            "ln",
            "log",
            "lreal",
            "lt",
            "ltime",
            "lword",
            "max",
            "method",
            "min",
            "mod",
            "move",
            "mul",
            "mux",
            "ne",
            "not",
            "of",
            "or",
            "orn",
            "params",
            "persistent",
            "pointer",
            "program",
            "r",
            "read_only",
            "read_write",
            "real",
            "reference",
            "repeat",
            "ret",
            "retain",
            "retc",
            "retcn",
            "return",
            "rol",
            "ror",
            "s",
            "sel",
            "shl",
            "shr",
            "sin",
            "sint",
            "sizeof",
            "sqrt",
            "st",
            "stn",
            "string",
            "struct",
            "sub",
            "super",
            "super",
            "tan",
            "then",
            "this",
            "time_of_day",
            "time",
            "to",
            "tod",
            "true",
            "trunc",
            "type",
            @"t#(?:\d+(?:ms|s|m|h|d))+",
            "udint",
            "uint",
            "ulint",
            "until",
            "usint",
            "uxint",
            "var_config",
            "var_external",
            "var_global",
            "var_in_out",
            "var_input",
            "var_output",
            "var_stat",
            "var_temp",
            "var",
            "while",
            "word",
            "wstring",
            "xint",
            "xor",
            "xorn",
            "xword",
            "pvoid",
        };
        static Regex KeywordsRegex = new Regex(
            @"(?<!\w)(" + string.Join("|", KeywordList) + @")(?!\w)",
            RegexOptions.IgnoreCase
        );

        static Regex SpacingRegex = new Regex(@"\s+");

        static string UpText(Match m)
        {
            return m.ToString().ToUpper(CultureInfo.InvariantCulture);
        }

        public static string Upper(string data)
        {
            return SpacingRegex.Replace(KeywordsRegex.Replace(data, KeywordsEval), " ");
        }
    }
}
